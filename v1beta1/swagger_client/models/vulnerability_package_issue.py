# coding: utf-8

"""
    grafeas.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.vulnerability_vulnerability_location import VulnerabilityVulnerabilityLocation  # noqa: F401,E501


class VulnerabilityPackageIssue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_location': 'VulnerabilityVulnerabilityLocation',
        'fixed_location': 'VulnerabilityVulnerabilityLocation',
        'severity_name': 'str'
    }

    attribute_map = {
        'affected_location': 'affected_location',
        'fixed_location': 'fixed_location',
        'severity_name': 'severity_name'
    }

    def __init__(self, affected_location=None, fixed_location=None, severity_name=None):  # noqa: E501
        """VulnerabilityPackageIssue - a model defined in Swagger"""  # noqa: E501
        self._affected_location = None
        self._fixed_location = None
        self._severity_name = None
        self.discriminator = None
        if affected_location is not None:
            self.affected_location = affected_location
        if fixed_location is not None:
            self.fixed_location = fixed_location
        if severity_name is not None:
            self.severity_name = severity_name

    @property
    def affected_location(self):
        """Gets the affected_location of this VulnerabilityPackageIssue.  # noqa: E501


        :return: The affected_location of this VulnerabilityPackageIssue.  # noqa: E501
        :rtype: VulnerabilityVulnerabilityLocation
        """
        return self._affected_location

    @affected_location.setter
    def affected_location(self, affected_location):
        """Sets the affected_location of this VulnerabilityPackageIssue.


        :param affected_location: The affected_location of this VulnerabilityPackageIssue.  # noqa: E501
        :type: VulnerabilityVulnerabilityLocation
        """

        self._affected_location = affected_location

    @property
    def fixed_location(self):
        """Gets the fixed_location of this VulnerabilityPackageIssue.  # noqa: E501


        :return: The fixed_location of this VulnerabilityPackageIssue.  # noqa: E501
        :rtype: VulnerabilityVulnerabilityLocation
        """
        return self._fixed_location

    @fixed_location.setter
    def fixed_location(self, fixed_location):
        """Sets the fixed_location of this VulnerabilityPackageIssue.


        :param fixed_location: The fixed_location of this VulnerabilityPackageIssue.  # noqa: E501
        :type: VulnerabilityVulnerabilityLocation
        """

        self._fixed_location = fixed_location

    @property
    def severity_name(self):
        """Gets the severity_name of this VulnerabilityPackageIssue.  # noqa: E501

        Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.  # noqa: E501

        :return: The severity_name of this VulnerabilityPackageIssue.  # noqa: E501
        :rtype: str
        """
        return self._severity_name

    @severity_name.setter
    def severity_name(self, severity_name):
        """Sets the severity_name of this VulnerabilityPackageIssue.

        Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.  # noqa: E501

        :param severity_name: The severity_name of this VulnerabilityPackageIssue.  # noqa: E501
        :type: str
        """

        self._severity_name = severity_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VulnerabilityPackageIssue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityPackageIssue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
